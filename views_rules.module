<?php
/**
 * @file
 * Views & Rules deep-level integration.
 */

/**
 * Gets data types.
 */
function views_rules_data_type_options() {
  $cache = rules_get_cache();
  $data_info = $cache['data_info'];
  unset($data_info['list']);
  $items = array();
  foreach ($data_info as $name => $info) {
    if (strpos($name, 'list<') === FALSE) {
      $items[$name] = $info;
    }
  }
  // Build options list as Rules UI would.
  module_load_include('inc', 'rules', 'ui/ui.core');
  $options = RulesPluginUI::getOptions('data', $items);

  return $options;
}

/**
 * Implements hook_views_api().
 */
function views_rules_views_api() {
  return array(
    'version' => '3.0',
  );
}

/**
 * Implements hook_views_plugins().
 */
function views_rules_views_plugins() {
  return array(
    'display' => array(
      'rules' => array(
        'title' => t('Rules'),
        'help' => t('Provide a display for using results in Rules.'),
        'handler' => 'views_rules_plugin_display_rules',
        'theme' => 'views_view',
        'uses hook menu' => FALSE,
        'uses fields' => TRUE,
        'accept attachments' => FALSE,
        'admin' => t('Rules'),
      ),
    ),
  );
}

/**
 * Implements hook_rules_plugin_info().
 */
function views_rules_rules_plugin_info() {
  return array(
    'views loop' => array(
      'class' => 'ViewsRulesLoop',
      'embeddable' => 'RulesActionContainer',
      'extenders' => array(
        'RulesPluginUIInterface' => array(
          'class' => 'ViewsRulesLoopUI',
        ),
      ),
    ),
  );
}
