<?php
/**
 * @file
 * Simpletest implementations.
 */

/**
 * Framework function tests.
 */
class ViewsRulesFrameworkTestCase extends DrupalWebTestCase {
  /**
   * Declares test.
   */
  public static function getInfo() {
    return array(
      'name' => 'Framework tests',
      'description' => 'Tests basic module functionality.',
      'group' => 'Views Rules',
    );
  }

  protected function setUp() {
    parent::setUp('views_rules_test');
  }

  /**
   * Tests data type listing.
   */
  public function testDataTypes() {
    $entityInfo = entity_get_info();

    // Check only primitives are returned.
    $items = views_rules_data_types();
    $this->assertIdentical(array(), array_intersect_key($items, $entityInfo), 'Default data types do not include entity types.');
    $this->assertIdentical(array(), array_filter(array_keys($items), array(__CLASS__, 'filterListDataTypes')), 'Default data types do not include lists.');

    // Check list types are returned.
    $items = views_rules_data_types(array('list' => TRUE));
    $this->assertNotIdentical(array(), array_filter(array_keys($items), array(__CLASS__, 'filterListDataTypes')), 'List types are correctly enumerated.');
    $this->assertIdentical($items, array_diff_key($items, $entityInfo), 'List types do not include entity types.');

    // Check entity types are returned.
    $items = views_rules_data_types(array('entity' => TRUE));
    $this->assertIdentical(array(), array_diff_key($entityInfo, $items), 'Entity types are correctly enumerated.');
    $this->assertIdentical(array(), array_filter(array_keys($items), array(__CLASS__, 'filterListDataTypes')), 'Entity data types do not include lists.');
  }

  /**
   * Filters list data types.
   */
  public static function filterListDataTypes($type) {
    return (bool) preg_match('/^list($|<)/', $type);
  }

  /**
   * Tests listing rule iterator view displays.
   */
  public function testListIterators() {
    $views_rules_test_id = 'views_rules_test:views_rules_1';

    $iterators = views_rules_list_iterators(FALSE);
    $this->assertTrue(array_key_exists($views_rules_test_id, $iterators), 'Views iterators are corrected listed.');
  }

  /**
   * Tests retrieving a view by view and display names joined by a colon.
   */
  public function testGetView() {
    $displayId = 'views_rules_1';
    $view = views_rules_get_view('views_rules_test:' . $displayId);
    $this->assertTrue(is_object($view) && $view instanceof view, 'Iterator view can be retrieved.');
    $this->assertEqual($displayId, $view->current_display, 'Iterator display is active in retrieved view.');
    $this->assertTrue($view->display_handler instanceof views_rules_iterator, 'Iterator object is ready.');
  }
}

/**
 * Views display tests.
 */
class ViewsRulesViewsDisplayTestCase extends DrupalWebTestCase {
  /**
   * Declares test.
   */
  public static function getInfo() {
    return array(
      'name' => 'Views display tests',
      'description' => 'Tests Views display plugin implementation.',
      'group' => 'Views Rules',
    );
  }

  protected function setUp() {
    parent::setUp('views_rules_test', 'views_ui');
    $user = $this->drupalCreateUser(array('administer views'));
    $this->drupalLogin($user);
  }

  /**
   * Tests Rules info retrieval.
   */
  public function testGetInfo() {
    /** @var $iterator views_rules_plugin_display_rules */
    $iterator = views_rules_get_view('views_rules_test:views_rules_1')->display_handler;

    // Check parameter info.
    $parameterInfo = $iterator->get_rules_parameter_info();
    $this->assertEqual(array('tid', 'type'), array_keys($parameterInfo), 'Iterator parameter info is correctly returned.');

    // Check variable info.
    $variableInfo = $iterator->get_rules_variable_info();
    $this->assertEqual(array('nid', 'title'), array_keys($variableInfo), 'Iterator row variable info is correctly returned.');
  }

  /**
   * Tests variable info configuration form.
   */
  public function testVariableForm() {
    $id = 'views_rules_test:views_rules_1';
    $editPath = 'admin/structure/views/view/views_rules_test/edit';

    // Test the row variable form.
    $this->drupalGet('admin/structure/views/nojs/display/views_rules_test/views_rules_1/rules_variables');
    $this->assertFieldByName('options[nid][enabled]', '1', 'Variable enabled checkbox is correctly displayed in form.');
    $this->assertFieldByName('options[nid][type]', 'integer', 'Variable type is correctly displayed in form.');
    $this->assertFieldByName('options[nid][label]', 'Nid', 'Variable label is correctly displayed in form.');
    $this->assertFieldByName('options[nid][name]', 'nid', 'Variable name is correctly displayed in form.');

    // Test changing variable.
    $edit = array(
      'options[nid][type]' => 'text',
      'options[nid][label]' => 'Test',
      'options[nid][name]' => 'test',
    );
    $this->drupalPost(NULL, $edit, t('Apply'));
    $this->assertUrl($editPath, array(), 'Variable details can be edited in form.');
    $this->drupalPost(NULL, array(), t('Save'));

    // Check info.
    $view = views_rules_get_view($id, TRUE);
    /** @var $iterator views_rules_iterator */
    $iterator = $view->display_handler;
    $expectedInfo = array(
      'test' => array('type' => 'text', 'label' => 'Test'),
      'title' => array('type' => 'text', 'label' => 'Title'),
    );
    $this->assertEqual($expectedInfo, $iterator->get_rules_variable_info(), 'Variable info is changed.');

    // TODO Test variable name valid characters.
    // TODO Test variable name uniqueness.
    // TODO Test variable name uniqueness with respect to parameters.
    // TODO Test name uniqueness.
  }
}

/**
 * Base test case for Rules tests.
 */
class ViewsRulesRulesTestBase extends DrupalWebTestCase {
  /**
   * Creates a view with a Rules display.
   */
  public function viewRulesDisplay() {
    // TODO
    return NULL;
  }
}

/**
 * Rules plugin tests.
 */
class ViewsRulesViewLoopTestCase extends ViewsRulesRulesTestBase {
  /**
   * Declares test.
   */
  public static function getInfo() {
    return array(
      'name' => 'Rules view loop tests',
      'description' => 'Tests view loop integration with Rules.',
      'group' => 'Views Rules',
    );
  }
}

/**
 * Rules plugin tests.
 */
class ViewsRulesCollectActionTestCase extends ViewsRulesRulesTestBase {
  /**
   * Declares test.
   */
  public static function getInfo() {
    return array(
      'name' => 'Rules collect action tests',
      'description' => 'Tests view loop integration with Rules.',
      'group' => 'Views Rules',
    );
  }
}
