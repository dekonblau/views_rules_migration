<?php
/**
 * @file
 * Simpletest implementations.
 */

/**
 * API function tests.
 */
class ViewsRulesAPITestCase extends DrupalWebTestCase {
  /**
   * Declares test.
   */
  public static function getInfo() {
    return array(
      'name' => 'API function tests',
      'description' => 'Tests basic module functionality.',
      'group' => 'Views Rules',
    );
  }

  protected function setUp() {
    parent::setUp('views_rules_test');
  }

  /**
   * Tests data type listing.
   */
  public function testDataTypes() {
    $entityInfo = entity_get_info();

    // Check only primitives are returned.
    $items = views_rules_data_types();
    $this->assertIdentical(array(), array_intersect_key($items, $entityInfo), 'Default data types do not include entity types.');
    $this->assertIdentical(array(), array_filter(array_keys($items), array(__CLASS__, 'filterListDataTypes')), 'Default data types do not include lists.');

    // Check list types are returned.
    $items = views_rules_data_types(array('list' => TRUE));
    $this->assertNotIdentical(array(), array_filter(array_keys($items), array(__CLASS__, 'filterListDataTypes')), 'List types are correctly enumerated.');
    $this->assertIdentical($items, array_diff_key($items, $entityInfo), 'List types do not include entity types.');

    // Check entity types are returned.
    $items = views_rules_data_types(array('entity' => TRUE));
    $this->assertIdentical(array(), array_diff_key($entityInfo, $items), 'Entity types are correctly enumerated.');
    $this->assertIdentical(array(), array_filter(array_keys($items), array(__CLASS__, 'filterListDataTypes')), 'Entity data types do not include lists.');
  }

  /**
   * Filters list data types.
   */
  public static function filterListDataTypes($type) {
    return 0 === strpos($type, 'list<');
  }

  /**
   * Tests listing rule iterator view displays.
   */
  public function testListIterators() {
    $views_rules_test_id = 'views_rules_test:views_rules_1';
    $views_rules_parameter_test_id = 'views_rules_parameter_test:views_rules_1';

    $iterators = views_rules_list_iterators(FALSE);
    $result = $this->assertTrue(array_key_exists($views_rules_test_id, $iterators)) & $this->assertTrue(array_key_exists($views_rules_parameter_test_id, $iterators));
    $this->assertTrue($result, 'Views iterators are corrected listed.');
  }

  /**
   * Tests retrieving a view by view and display names joined by a colon.
   */
  public function testGetView() {
    // TODO
  }
}

/**
 * Views display tests.
 */
class ViewsRulesViewsDisplayTestCase extends DrupalWebTestCase {
  /**
   * Declares test.
   */
  public static function getInfo() {
    return array(
      'name' => 'Views integration tests',
      'description' => 'Tests Views display plugin implementations.',
      'group' => 'Views Rules',
    );
  }
}

/**
 * Base test case for Rules tests.
 */
class ViewsRulesRulesTestBase extends DrupalWebTestCase {
  /**
   * Creates a view with a Rules display.
   */
  public function viewRulesDisplay() {
    // TODO
    return NULL;
  }
}

/**
 * Rules plugin tests.
 */
class ViewsRulesViewLoopTestCase extends ViewsRulesRulesTestBase {
  /**
   * Declares test.
   */
  public static function getInfo() {
    return array(
      'name' => 'Rules view loop tests',
      'description' => 'Tests view loop integration with Rules.',
      'group' => 'Views Rules',
    );
  }
}

/**
 * Rules plugin tests.
 */
class ViewsRulesCollectActionTestCase extends ViewsRulesRulesTestBase {
  /**
   * Declares test.
   */
  public static function getInfo() {
    return array(
      'name' => 'Rules collect action tests',
      'description' => 'Tests view loop integration with Rules.',
      'group' => 'Views Rules',
    );
  }
}
