<?php
/**
 * @file
 * Simpletest implementations.
 */

/**
 * Framework function tests.
 */
class ViewsRulesFrameworkTestCase extends DrupalWebTestCase {
  /**
   * Declares test.
   */
  public static function getInfo() {
    return array(
      'name' => 'Framework tests',
      'description' => 'Tests basic module functionality.',
      'group' => 'Views Rules',
    );
  }

  protected function setUp() {
    parent::setUp('views_rules_test');
  }

  /**
   * Tests data type listing.
   */
  public function testDataTypes() {
    $entityInfo = entity_get_info();

    // Check only primitives are returned.
    $items = views_rules_data_types();
    $this->assertIdentical(array(), array_intersect_key($items, $entityInfo), 'Default data types do not include entity types.');
    $this->assertIdentical(array(), array_filter(array_keys($items), array(__CLASS__, 'filterListDataTypes')), 'Default data types do not include lists.');

    // Check list types are returned.
    $items = views_rules_data_types(array('list' => TRUE));
    $this->assertNotIdentical(array(), array_filter(array_keys($items), array(__CLASS__, 'filterListDataTypes')), 'List types are correctly enumerated.');
    $this->assertIdentical($items, array_diff_key($items, $entityInfo), 'List types do not include entity types.');

    // Check entity types are returned.
    $items = views_rules_data_types(array('entity' => TRUE));
    $this->assertIdentical(array(), array_diff_key($entityInfo, $items), 'Entity types are correctly enumerated.');
    $this->assertIdentical(array(), array_filter(array_keys($items), array(__CLASS__, 'filterListDataTypes')), 'Entity data types do not include lists.');
  }

  /**
   * Filters list data types.
   */
  public static function filterListDataTypes($type) {
    return (bool) preg_match('/^list($|<)/', $type);
  }

  /**
   * Tests listing rule iterator view displays.
   */
  public function testListIterators() {
    $views_rules_test_id = 'views_rules_test:views_rules_1';

    $iterators = views_rules_list_iterators(FALSE);
    $this->assertTrue(array_key_exists($views_rules_test_id, $iterators), 'Views iterators are corrected listed.');
  }

  /**
   * Tests retrieving a view by view and display names joined by a colon.
   */
  public function testGetView() {
    $displayId = 'views_rules_1';
    $view = views_rules_get_view('views_rules_test:' . $displayId);
    $this->assertTrue(is_object($view) && $view instanceof view, 'Iterator view can be retrieved.');
    $this->assertEqual($displayId, $view->current_display, 'Iterator display is active in retrieved view.');
    $this->assertTrue($view->display_handler instanceof views_rules_iterator, 'Iterator object is ready.');
  }
}

/**
 * Views display tests.
 */
class ViewsRulesViewsDisplayTestCase extends DrupalWebTestCase {
  /**
   * Declares test.
   */
  public static function getInfo() {
    return array(
      'name' => 'Views display tests',
      'description' => 'Tests Views display plugin implementation.',
      'group' => 'Views Rules',
    );
  }

  protected function setUp() {
    parent::setUp('views_rules_test', 'views_ui');
    $user = $this->drupalCreateUser(array('administer views'));
    $this->drupalLogin($user);
  }

  /**
   * Tests Rules info retrieval.
   */
  public function testGetInfo() {
    /** @var $iterator views_rules_plugin_display_rules */
    $iterator = views_rules_get_view('views_rules_test:views_rules_1')->display_handler;

    // Check parameter info.
    $parameterInfo = $iterator->get_rules_parameter_info();
    $this->assertEqual(array('tid', 'type'), array_keys($parameterInfo), 'Iterator parameter info is correctly returned.');

    // Check variable info.
    $variableInfo = $iterator->get_rules_variable_info();
    $this->assertEqual(array('nid', 'title'), array_keys($variableInfo), 'Iterator row variable info is correctly returned.');
  }

  /**
   * Tests variable info configuration form.
   */
  public function testVariableForm() {
    $id = 'views_rules_test:views_rules_1';
    $editPath = 'admin/structure/views/view/views_rules_test/edit';
    $variablePath = 'admin/structure/views/nojs/display/views_rules_test/views_rules_1/rules_variables';
    $rearrangePath = 'admin/structure/views/nojs/rearrange/views_rules_test/views_rules_1/field';

    // Test the row variable form.
    $this->drupalGet($variablePath);
    $this->assertFieldByName('options[nid][enabled]', NULL, 'Variable enabled checkbox is correctly displayed in form.');
    $this->assertFieldByName('options[nid][type]', 'integer', 'Variable type is correctly displayed in form.');
    $this->assertFieldByName('options[nid][label]', 'Nid', 'Variable label is correctly displayed in form.');
    $this->assertFieldByName('options[nid][name]', 'nid', 'Variable name is correctly displayed in form.');

    // Test changing variable.
    $edit = array(
      'options[nid][type]' => 'text',
      'options[nid][label]' => 'Test',
      'options[nid][name]' => 'test',
    );
    $this->drupalPost(NULL, $edit, t('Apply'));
    $this->assertUrl($editPath, array(), 'Variable details can be edited in form.');
    $this->drupalPost(NULL, array(), t('Save'));

    // Check info.
    $view = views_rules_get_view($id, TRUE);
    /** @var $iterator views_rules_iterator */
    $iterator = $view->display_handler;
    $expectedInfo = array(
      'test' => array('type' => 'text', 'label' => 'Test'),
      'title' => array('type' => 'text', 'label' => 'Title'),
    );
    $this->assertIdentical($expectedInfo, $iterator->get_rules_variable_info(), 'Variable info is changed.');

    // Test variable name valid characters.
    $edit = array(
      'options[nid][name]' => '#',
    );
    $this->drupalPost($variablePath, $edit, t('Apply'));
    $this->assertNotEqual($editPath, $this->getUrl(), 'Only valid variable names can be saved.');

    // Test variable name uniqueness.
    $edit = array(
      'options[nid][name]' => 'title',
    );
    $this->drupalPost($variablePath, $edit, t('Apply'));
    $this->assertNotEqual($editPath, $this->getUrl(), 'Variable names must not overlap.');

    // Test variable name uniqueness with respect to parameters.
    $edit = array(
      'options[nid][name]' => 'tid',
    );
    $this->drupalPost($variablePath, $edit, t('Apply'));
    $this->assertNotEqual($editPath, $this->getUrl(), 'Variable names must not overlap with parameter names.');

    // Test rearranging variables.
    $edit = array(
      'nid[weight]' => '2',
      'title[weight]' => '1',
    );
    $this->drupalPost($rearrangePath, $edit, t('Apply'));
    $this->drupalPost(NULL, array(), t('Save'));
    $view = views_rules_get_view($id, TRUE);
    /** @var $iterator views_rules_iterator */
    $iterator = $view->display_handler;
    $this->assertEqual(array('title', 'test'), array_keys($iterator->get_rules_variable_info()), 'Variable info is returned according to ordering in view.');

    // Test emptying a variable field.
    $edit = array(
      'options[nid][type]' => '',
    );
    $this->drupalPost($variablePath, $edit, t('Apply'));
    $this->assertNotEqual($editPath, $this->getUrl(), 'Variable type cannot be empty.');
    $edit = array(
      'options[nid][label]' => '',
    );
    $this->drupalPost($variablePath, $edit, t('Apply'));
    $this->assertNotEqual($editPath, $this->getUrl(), 'Variable label cannot be empty.');
    $edit = array(
      'options[nid][name]' => '',
    );
    $this->drupalPost($variablePath, $edit, t('Apply'));
    $this->assertNotEqual($editPath, $this->getUrl(), 'Variable name cannot be empty.');
    $edit = array(
      'options[nid][enabled]' => FALSE,
    );
    $this->drupalPost(NULL, $edit, t('Apply'));
    $this->assertUrl($editPath, array(), 'Disabled variable can be empty.');

    // Test disabling a variable.
    $edit = array(
      'options[nid][enabled]' => FALSE,
    );
    $this->drupalPost($variablePath, $edit, t('Apply'));
    $this->drupalPost(NULL, array(), t('Save'));
    $view = views_rules_get_view($id, TRUE);
    /** @var $iterator views_rules_iterator */
    $iterator = $view->display_handler;
    $this->assertEqual(array('title'), array_keys($iterator->get_rules_variable_info()), 'Variable can be disabled.');
  }

  /**
   * Tests parameter info configuration form.
   */
  public function testParameterForm() {
    $id = 'views_rules_test:views_rules_1';
    $editPath = 'admin/structure/views/view/views_rules_test/edit';
    $variablePath = 'admin/structure/views/nojs/display/views_rules_test/views_rules_1/rules_parameter';
    $rearrangePath = 'admin/structure/views/nojs/rearrange/views_rules_test/views_rules_1/argument';

    // Test the parameter form.
    $this->drupalGet($variablePath);
    $this->assertNoFieldByName('options[nid][enabled]', '', 'Parameter enabled checkbox is not displayed in form.');

    // Test changing parameter.
    $edit = array(
      'options[type][type]' => 'text',
      'options[type][label]' => 'Test',
      'options[type][name]' => 'test',
    );
    $this->drupalPost(NULL, $edit, t('Apply'));
    $this->assertUrl($editPath, array(), 'Parameter details can be edited in form.');
    $this->drupalPost(NULL, array(), t('Save'));

    // Check info.
    $view = views_rules_get_view($id, TRUE);
    /** @var $iterator views_rules_iterator */
    $iterator = $view->display_handler;
    $expectedInfo = array(
      'tid' => array('type' => 'integer', 'label' => 'Term ID'),
      'test' => array('type' => 'text', 'label' => 'Test'),
    );
    $this->assertIdentical($expectedInfo, $iterator->get_rules_parameter_info(), 'Parameter info is changed.');

    // Test parameter name uniqueness.
    $edit = array(
      'options[type][name]' => 'tid',
    );
    $this->drupalPost($variablePath, $edit, t('Apply'));
    $this->assertNotEqual($editPath, $this->getUrl(), 'Parameter names must not overlap.');

    // Test rearranging parameters.
    $edit = array(
      'field_tags_tid[weight]' => '2',
      'type[weight]' => '1',
    );
    $this->drupalPost($rearrangePath, $edit, t('Apply'));
    $this->drupalPost(NULL, array(), t('Save'));
    $view = views_rules_get_view($id, TRUE);
    /** @var $iterator views_rules_iterator */
    $iterator = $view->display_handler;
    $this->assertEqual(array('test', 'tid'), array_keys($iterator->get_rules_parameter_info()), 'Parameter info is returned according to ordering in view.');

    // Test emptying a parameter field.
    $edit = array(
      'options[type][type]' => '',
    );
    $this->drupalPost($variablePath, $edit, t('Apply'));
    $this->assertNotEqual($editPath, $this->getUrl(), 'Parameter type cannot be empty.');
    $edit = array(
      'options[type][label]' => '',
    );
    $this->drupalPost($variablePath, $edit, t('Apply'));
    $this->assertNotEqual($editPath, $this->getUrl(), 'Parameter label cannot be empty.');
    $edit = array(
      'options[type][name]' => '',
    );
    $this->drupalPost($variablePath, $edit, t('Apply'));
    $this->assertNotEqual($editPath, $this->getUrl(), 'Parameter name cannot be empty.');
  }

  /**
   * Tests iterator evaluation.
   */
  public function testExecuteIterator() {
    $iterable = new ViewsRulesTestIterable();
    $view = views_rules_get_view('views_rules_test:views_rules_1');
    /** @var $iterator views_rules_plugin_display_rules */
    $iterator = $view->display_handler;

    // Create sample items.
    module_enable(array('taxonomy'));
    $vocabulary = taxonomy_vocabulary_machine_name_load('tags');
    $term = (object) array(
      'name' => 'Term 1',
      'vid' => $vocabulary->vid,
      'vocabulary_machine_name' => 'tags',
    );
    taxonomy_term_save($term);
    $nodeBase = array(
      'type' => 'article',
      'language' => LANGUAGE_NONE,
      'field_tags' => array(LANGUAGE_NONE => array(array('tid' => $term->tid))),
    );
    $this->drupalCreateNode(array('title' => 'Node 1') + $nodeBase);
    $this->drupalCreateNode(array('title' => 'Node 2') + $nodeBase);
    $this->drupalCreateNode(array('title' => 'Node 3') + $nodeBase);

    // Disable nid and test executing iterator.
    $option = $iterator->get_option('rules_variables');
    $option['nid']['enabled'] = 0;
    $iterator->set_option('rules_variables', $option);
    $iterator->execute_iterator(array($term->tid), $iterable);
    $expectedData = array(
      array('title' => 'Node 1'),
      array('title' => 'Node 2'),
      array('title' => 'Node 3'),
    );
    $this->assertIdentical($expectedData, $iterable->rows, 'Iterator display correctly evaluates.');
  }
}

/**
 * Base test case for Rules tests.
 */
class ViewsRulesRulesTestBase extends DrupalWebTestCase {
  /**
   * Creates a view with a Rules display.
   */
  public function viewRulesDisplay() {
    // TODO
    return NULL;
  }
}

/**
 * Rules plugin tests.
 */
class ViewsRulesViewLoopTestCase extends ViewsRulesRulesTestBase {
  /**
   * Declares test.
   */
  public static function getInfo() {
    return array(
      'name' => 'Rules view loop tests',
      'description' => 'Tests view loop integration with Rules.',
      'group' => 'Views Rules',
    );
  }
}

/**
 * Rules plugin tests.
 */
class ViewsRulesCollectActionTestCase extends ViewsRulesRulesTestBase {
  /**
   * Declares test.
   */
  public static function getInfo() {
    return array(
      'name' => 'Rules collect action tests',
      'description' => 'Tests view loop integration with Rules.',
      'group' => 'Views Rules',
    );
  }
}
